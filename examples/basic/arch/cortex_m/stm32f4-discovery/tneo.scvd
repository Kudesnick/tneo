<?xml version="1.0" encoding="utf-8"?>

<component_viewer schemaVersion="1.2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="Component_Viewer.xsd">

<component name="TNeo" version="1.0.0"/>  <!--name and version of the component-->
  <typedefs>

    <typedef name="TN_StateFlag" size="1" info="">
      <member name="id" type="uint8_t" offset="0" info="System state flags">
        <enum name="TN_STATE_FLAG__SYS_NOINIT"  value="0x00" info=""/>
        <enum name="TN_STATE_FLAG__SYS_RUNNING" value="0x01" info=""/>
        <enum name="TN_STATE_FLAG__DEADLOCK"    value="0x03" info=""/>
      </member>
    </typedef>

    <typedef name="TN_ObjId" size="4">
      <member name="id" type="uint32_t">
        <enum name="TN_ID_NONE"          value="0x00000000" info="invalid object"/>
        <enum name="TN_ID_TASK"          value="0x47ABCF69" info="tasks"/>
        <enum name="TN_ID_SEMAPHORE"     value="0x6FA173EB" info="semaphores"/>
        <enum name="TN_ID_EVENTGRP"      value="0x5E224F25" info="event groups"/>
        <enum name="TN_ID_DATAQUEUE"     value="0x0C8A6C89" info="data queues"/>
        <enum name="TN_ID_FSMEMORYPOOL"  value="0x26B7CE8B" info="fixed memory pools"/>
        <enum name="TN_ID_MUTEX"         value="0x17129E45" info="mutexes"/>
        <enum name="TN_ID_TIMER"         value="0x1A937FBC" info="timers"/>
        <enum name="TN_ID_EXCHANGE"      value="0x32b7c072" info="exchange objects"/>
        <enum name="TN_ID_EXCHANGE_LINK" value="0x24d36f35" info="exchange link"/>
      </member>
    </typedef>

    <typedef name="TN_ListItem" size="8">
      <member name="prev" type="*TN_ListItem" info=""/>
      <member name="next" type="*TN_ListItem" info=""/>
    </typedef>

    <typedef name="TN_Timer" size="5 * 4">
      <member name="id_timer"    type="uint32_t" info="TN_ObjId"/>
      <member name="timer_queue" type="uint32_t" info="TN_ListItem"/>
      <member name="func"        type="uint32_t" info="TN_TimerFunc *"/>
      <member name="p_user_data" type="uint32_t" info="void *"/>
      <member name="timeout_cur" type="uint32_t" info="TN_TickCnt"/>
    </typedef>

    <typedef name="TN_TaskState" size="1">
      <member name="id" type="uint8_t">
        <enum name="TN_TASK_STATE_NONE"       value="0"    info=""/>
        <enum name="TN_TASK_STATE_RUNNABLE"   value="1"    info=""/>
        <enum name="TN_TASK_STATE_WAIT"       value="2"    info=""/>
        <enum name="TN_TASK_STATE_SUSPEND"    value="4"    info=""/>
        <enum name="TN_TASK_STATE_WAITSUSP"   value="4+2"  info=""/>
        <enum name="TN_TASK_STATE_DORMANT"    value="8"    info=""/>
        <enum name="TN_TASK_STATE_YIELD"      value="16"   info=""/>
        <enum name="TN_TASK_STATE_RUNTOYIELD" value="16+1" info=""/>

      </member>
    </typedef>

    <typedef name="TN_WaitReason" size="1">
      <member name="id" type="uint8_t">
        <enum name="TN_WAIT_REASON_NONE"          value="0" info=""/>
        <enum name="TN_WAIT_REASON_SLEEP"         value="1" info=""/>
        <enum name="TN_WAIT_REASON_SEM"           value="2" info=""/>
        <enum name="TN_WAIT_REASON_EVENT"         value="3" info=""/>
        <enum name="TN_WAIT_REASON_DQUE_WSEND"    value="4" info=""/>
        <enum name="TN_WAIT_REASON_DQUE_WRECEIVE" value="5" info=""/>
        <enum name="TN_WAIT_REASON_MUTEX_C"       value="6" info=""/>
        <enum name="TN_WAIT_REASON_MUTEX_I"       value="7" info=""/>
        <enum name="TN_WAIT_REASON_WFIXMEM"       value="8" info=""/>
        <enum name="TN_WAIT_REASONS_CNT"          value="9" info=""/>
      </member>
    </typedef>

    <typedef name="TN_RCode" size="1">
      <member name="id" type="int8_t">
        <enum name="TN_RC_OK"          value="0"   info=""/>
        <enum name="TN_RC_TIMEOUT"     value="-1"  info=""/>
        <enum name="TN_RC_OVERFLOW"    value="-2"  info=""/>
        <enum name="TN_RC_WCONTEXT"    value="-3"  info=""/>
        <enum name="TN_RC_WSTATE"      value="-4"  info=""/>
        <enum name="TN_RC_WPARAM"      value="-5"  info=""/>
        <enum name="TN_RC_ILLEGAL_USE" value="-6"  info=""/>
        <enum name="TN_RC_INVALID_OBJ" value="-7"  info=""/>
        <enum name="TN_RC_DELETED"     value="-8"  info=""/>
        <enum name="TN_RC_FORCED"      value="-9"  info=""/>
        <enum name="TN_RC_INTERNAL"    value="-10" info=""/>
      </member>
    </typedef>

    <typedef name="_TN_TaskProfiler" size="28">
      <member name="last_tick_cnt"              type="uint32_t" info=""/>
  <!-- member name="last_wait_reason"           type="uint8_t"  info="TN_WaitReason"/ -->
      <member name="is_running"                 type="int32_t"  info=""/>
      <!-- TN_TaskTiming -->
  <!-- member name="total_wait_time"            type="uint64_t" size="8*9"/ -->
  <!-- member name="max_consecutive_wait_time"  type="uint32_t" size="4*9"/ -->
      <member name="total_run_time"             type="uint64_t" info="Total time when task was running"/>
      <member name="got_running_cnt"            type="uint64_t" info="How many times task got running"/>
      <member name="max_consecutive_run_time"   type="uint32_t" info="Maximum consecutive time task was running"/>
    </typedef>

    <!-- Task -->
    <typedef name="TN_Task" size="1024" info="" import="_tn_scvd_task">
      <member name="stack_cur_pt"     type="uint32_t"       info="uint32_t*"/>
      <member name="id_task"          type="uint32_t"       info="TN_ObjId"/>
      <member name="task_queue"       type="uint32_t"       info="TN_ListItem"/>
      <member name="timer"            type="uint32_t"       info="TN_Timer"/>
      <member name="pwait_queue"      type="*TN_ListItem"   info=""/>
      <member name="create_queue"     type="uint32_t"       info="TN_ListItem"/>
      <member name="mutex_queue"      type="uint32_t"       info="TN_ListItem"/>
      <member name="deadlock_list"    type="uint32_t"       info="TN_ListItem"/>
      <member name="stack_low_addr"   type="uint32_t"       info=""/>
      <member name="stack_high_addr"  type="uint32_t"       info=""/>
      <member name="task_func_addr"   type="uint32_t"       info=""/>
      <member name="task_func_param"  type="uint32_t"       info=""/>
      <member name="base_priority"    type="int32_t"        info=""/>
      <member name="priority"         type="int32_t"        info=""/>
      <member name="task_state"       type="uint8_t"        info="TN_TaskState"/>
      <member name="task_wait_reason" type="uint8_t"        info="TN_WaitReason"/>
      <member name="task_wait_rc"     type="int8_t"         info="TN_RCode"/>
      <member name="tslice_count"     type="int32_t"        info=""/>
      <member name="subsys_wait"      type="int32_t"        info=""/>
      <member name="name"             type="uint32_t"       info="char *"/>
      <member name="profiler"         type="uint32_t"       info="_TN_TaskProfiler"/>
      <var name="stack_usd_max"  type="uint8_t"  value="0"/>
      <var name="stack_usd_byte" type="uint32_t" value="0"/>
      <var name="time_load"      type="uint8_t"  value="0"/>
    </typedef>

  </typedefs>

  <objects>
    <object name="TNeo">
      <read name="_tn_tasks_created_cnt"  type="int32_t"      symbol="_tn_tasks_created_cnt"/>
      <read name="_tn_sys_state"          type="TN_StateFlag" symbol="_tn_sys_state"/>
      <read name="_tn_sys_time_count"     type="uint32_t"     symbol="_tn_sys_time_count"/>
      <read name="_tn_int_stack"          type="uint32_t"     symbol="_tn_int_stack"/>
      <read name="_tn_int_stack_size"     type="uint32_t"     symbol="_tn_int_stack_size"/>

      <var name="tmp" type="uint32_t" value="0"/>

      <var name="int_stack_usd_max" type="uint8_t"  value="0"/>
      <var name="int_stack_usd_bytes" type="uint32_t"  value="0"/>
      
      <calc>
        tmp = __CalcMemUsed(_tn_int_stack, _tn_int_stack_size * 4, 0xFEEDFACE, 0xFEEDFACE)
        int_stack_usd_max = (tmp &gt;&gt; 20) &amp; 0xFF;
        int_stack_usd_bytes = tmp &amp; ((1 &lt;&lt; 20) - 1);
      </calc>

      <!-- TN_Task read -->
      <readlist name="task_queue" type="TN_ListItem" symbol="_tn_tasks_created_list" next="next" init="1"/>

      <list name="i" start="1" limit="task_queue._count">

        <calc>
          tmp = task_queue[i]._addr;
          tmp -= __Offset_of(TN_Task:create_queue);
        </calc>

        <readlist name="task"         type="TN_Task"          offset="tmp"/>
        <readlist name="profiler"     type="_TN_TaskProfiler" offset="tmp + __Offset_of(TN_Task:profiler)"/>
        <readlist name="id_task"      type="TN_ObjId"         offset="tmp + __Offset_of(TN_Task:id_task)"/>
        <readlist name="state"        type="TN_TaskState"     offset="tmp + __Offset_of(TN_Task:task_state)"/>
        <readlist name="wait_reason"  type="TN_WaitReason"    offset="tmp + __Offset_of(TN_Task:task_wait_reason)"/>
        <readlist name="task_wait_rc" type="TN_RCode"         offset="tmp + __Offset_of(TN_Task:task_wait_rc)"/>
      </list>

      <list name="i" start="0" limit="task._count">
        <calc>
          tmp = task[i].stack_high_addr - task[i].stack_low_addr + 4;
          tmp = __CalcMemUsed(task[i].stack_low_addr, tmp, 0xFEEDFACE, 0xFEEDFACE);
          task[i].stack_usd_max = (tmp &gt;&gt; 20) &amp; 0xFF;
          task[i].stack_usd_byte = tmp &amp; ((1 &lt;&lt; 20) - 1);
          task[i].time_load = profiler[i].total_run_time * 100 / (_tn_sys_time_count + 1);
        </calc>
      </list>

      <var name="i" type="uint32_t" value="0"/>

      <!-- out -->
      <out name="TNeo">

        <item property="Kernel" value="">
          <item property="count of created tasks" value="%d[_tn_tasks_created_cnt]"/>
          <item property="system state flags"     value="%E[_tn_sys_state.id]"/>
          <item property="system time"            value="%d[_tn_sys_time_count]"/>
          <item property="system stack used"      value="%d[int_stack_usd_max]%% (%d[int_stack_usd_bytes] of %d[_tn_int_stack_size * 4] bytes)" alert="int_stack_usd_max &gt; 95"/>
        </item>

        <!-- TN_Task out -->
        <item property="Tasks" value="%d[task._count] items">
          <list name="i" start="0" limit="task._count">
            <item property="%x[task[i]._addr] %N[task[i].name]" value="load=%d[task[i].time_load]%% | stk=%d[task[i].stack_usd_max]%% (%d[task[i].stack_usd_byte] of %d[task[i].stack_high_addr - task[i].stack_low_addr + 4] bytes)" alert="task[i].stack_usd_max &gt; 95">
              <item property="id task"                  value="%x[id_task[i].id] (%E[id_task[i].id])" alert="id_task[i].id != TN_ObjId:id:TN_ID_TASK"/>
              <item property="task state"               value="%x[state[i].id] (%E[state[i].id])"/>
              <item property="priority"                 value="%d[task[i].base_priority] &gt; %d[task[i].priority]" bold="task[i].base_priority != task[i].priority"/>
              <item property="task wait reason"         value="%x[wait_reason[i].id] (%E[wait_reason[i].id])"/>
              <item property="task wait rc"             value="%x[task_wait_rc[i].id] (%E[task_wait_rc[i].id])" alert="task_wait_rc[i].id != TN_RCode:id:TN_RC_OK &amp;&amp; task_wait_rc[i].id != TN_RCode:id:TN_RC_TIMEOUT"/>
              <item property="total run time"           value="%d[profiler[i].total_run_time]"/>
              <item property="got running cnt"          value="%d[profiler[i].got_running_cnt]"/>
              <item property="max consecutive run time" value="%d[profiler[i].max_consecutive_run_time]"/>
            </item>
          </list>
       </item>
      </out>
    </object>
  </objects>

</component_viewer>
